{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { summarizeRiskFactors } from '@/ai/flows/summarize-risk-factors';\nimport type { SentinelReportData } from '@/types';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\n// Promisify the exec function to use it with async/await\nconst execPromise = promisify(exec);\n\nexport interface FormState {\n  report: SentinelReportData | null;\n  error: string | null;\n}\n\nconst TokenSchema = z.string().min(32, { message: 'Invalid Solana address.' }).max(44, { message: 'Invalid Solana address.' });\n\n/**\n * Fetches on-chain token data from the Helius API.\n * @param tokenAddress The Solana token address.\n * @returns A promise that resolves to the on-chain analysis data.\n */\nasync function fetchOnChainData(tokenAddress: string) {\n  const HELIUS_API_KEY = process.env.HELIUS_API_KEY;\n  if (!HELIUS_API_KEY) {\n    throw new Error(\"Helius API key is not configured in environment variables.\");\n  }\n  const url = `https://mainnet.helius-rpc.com/?api-key=${HELIUS_API_KEY}`;\n\n  try {\n    const [assetResponse, largestAccountsResponse, tokenSupplyResponse] = await Promise.all([\n      fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'solana-sentinel-asset',\n          method: 'getAsset',\n          params: { id: tokenAddress },\n        }),\n      }),\n      fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'solana-sentinel-holders',\n          method: 'getTokenLargestAccounts',\n          params: [tokenAddress],\n        }),\n      }),\n       fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'solana-sentinel-supply',\n          method: 'getTokenSupply',\n          params: [tokenAddress],\n        }),\n      })\n    ]);\n\n    if (!assetResponse.ok || !largestAccountsResponse.ok || !tokenSupplyResponse.ok) {\n        const errorBody = await assetResponse.text();\n        console.error(\"Helius API Error Body:\", errorBody);\n        throw new Error(`Helius API call failed with status ${assetResponse.status}`);\n    }\n\n    const assetData = await assetResponse.json();\n    const largestAccountsData = await largestAccountsResponse.json();\n    const tokenSupplyData = await tokenSupplyResponse.json();\n\n    if (assetData.error || largestAccountsData.error || tokenSupplyData.error) {\n        throw new Error(`Helius API returned an error: ${assetData.error?.message || largestAccountsData.error?.message || tokenSupplyData.error?.message}`);\n    }\n\n    // --- Data Parsing Logic ---\n    const { result: assetResult } = assetData;\n    const { result: largestAccountsResult } = largestAccountsData;\n    const { result: tokenSupplyResult } = tokenSupplyData;\n    \n    // 1. Basic Info & Authorities\n    const tokenName = assetResult.content?.metadata?.name || 'Unknown Token';\n    const tokenSymbol = assetResult.content?.metadata?.symbol || '???';\n    const mintAuthorityRenounced = assetResult.ownership?.mint_authority === null;\n    const freezeAuthorityRenounced = assetResult.ownership?.freeze_authority === null;\n\n    // 2. Holder Concentration\n    let top10HolderConcentrationPercent = 0;\n    const totalSupply = parseFloat(tokenSupplyResult.value.amount);\n    if (totalSupply > 0 && largestAccountsResult.value.length > 0) {\n        const top10Holders = largestAccountsResult.value.slice(0, 10);\n        const top10Supply = top10Holders.reduce((acc: number, holder: any) => acc + parseFloat(holder.amount), 0);\n        top10HolderConcentrationPercent = (top10Supply / totalSupply) * 100;\n    }\n    \n    // 3. Deployer LP Holdings (Placeholder)\n    // TODO: This is a highly complex calculation that requires analyzing transaction history\n    // to find the original liquidity provision transaction from the deployer.\n    // For now, we use a random value as a placeholder.\n    const deployerLpConcentrationPercent = Math.random() * 40; // 0% to 40%\n\n    return {\n      tokenName,\n      tokenSymbol,\n      mintAuthorityRenounced,\n      freezeAuthorityRenounced,\n      top10HolderConcentrationPercent,\n      deployerLpConcentrationPercent,\n    };\n\n  } catch (error) {\n    console.error(\"Error fetching from Helius:\", error);\n    if (error instanceof Error) {\n        throw new Error(`Failed to fetch on-chain data from Helius: ${error.message}`);\n    }\n    throw new Error(\"An unknown error occurred while fetching from Helius.\");\n  }\n}\n\n/**\n * Triggers a sentiment analysis job on the Nosana Network.\n * @param tokenSymbol The token symbol to analyze.\n * @returns A promise that resolves to the sentiment analysis results.\n */\nasync function fetchSentimentAnalysis(tokenSymbol: string) {\n  const NOSANA_JOB_ID = process.env.NOSANA_JOB_ID;\n  if (!NOSANA_JOB_ID || NOSANA_JOB_ID === 'your-sentiment-job-id') {\n      console.warn(\"Nosana Job ID is not configured. Falling back to mock sentiment data.\");\n      return generateMockSentiment();\n  }\n  \n  try {\n    // 1. Trigger the job.\n    const runCommand = `nosana job run --input '{\"symbol\": \"${tokenSymbol}\"}' ${NOSANA_JOB_ID}`;\n    console.log(`Executing Nosana command: ${runCommand}`);\n    const { stdout: runStdout } = await execPromise(runCommand);\n    const runResult = JSON.parse(runStdout);\n    const jobId = runResult.job.id;\n    console.log(`Started Nosana job with ID: ${jobId}`);\n\n    // 2. Poll for the result. This is a simplified polling mechanism.\n    let jobResult;\n    for (let i = 0; i < 15; i++) { // Poll up to 15 times (75 seconds)\n      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5s\n      const resultCommand = `nosana job result ${jobId}`;\n      console.log(`Polling for result with command: ${resultCommand}`);\n      const { stdout: resultStdout } = await execPromise(resultCommand);\n      const parsedResult = JSON.parse(resultStdout);\n      if (parsedResult.job.state === 'Completed') {\n        // The result from the Nosana job is often a stringified JSON in stdout,\n        // so it might need to be parsed twice.\n        jobResult = JSON.parse(parsedResult.result.stdout); \n        console.log(\"Nosana job completed.\", jobResult);\n        break;\n      }\n    }\n\n    if (!jobResult) {\n      throw new Error(\"Nosana job did not complete in time.\");\n    }\n    \n    // --- Data Parsing Logic ---\n    // Assumes your Nosana job returns an object like:\n    // { \"compound\": 0.88, \"summary\": \"Overwhelmingly Positive\" }\n    return { \n        compoundScore: jobResult.compound, \n        humanReadableSummary: jobResult.summary \n    };\n    \n  } catch (error) {\n    console.warn(\"Could not execute Nosana CLI. This may be because it is not installed or configured. Falling back to mock sentiment data.\", error);\n    return generateMockSentiment();\n  }\n}\n\nasync function generateMockSentiment() {\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay\n    \n    const sentimentScore = Math.random() * 2 - 1; // -1 to 1\n    let humanReadableSummary: string;\n    if (sentimentScore > 0.6) {\n      humanReadableSummary = 'Overwhelmingly Positive';\n    } else if (sentimentScore > 0.2) {\n      humanReadableSummary = 'Positive';\n    } else if (sentimentScore < -0.6) {\n      humanReadableSummary = 'Highly Negative';\n    } else if (sentimentScore < -0.2) {\n      humanReadableSummary = 'Negative';\n    } else {\n      humanReadableSummary = 'Mixed';\n    }\n\n    return {\n      compoundScore: sentimentScore,\n      humanReadableSummary,\n    };\n}\n\n\nexport async function analyzeToken(prevState: FormState, formData: FormData): Promise<FormState> {\n  const tokenAddress = formData.get('tokenAddress') as string;\n\n  const validation = TokenSchema.safeParse(tokenAddress);\n\n  if (!validation.success) {\n    return { report: null, error: validation.error.errors[0].message };\n  }\n\n  try {\n    // Step 1: Fetch live on-chain data from Helius\n    const onChainData = await fetchOnChainData(validation.data);\n\n    // Step 2: Trigger sentiment analysis on Nosana\n    const sentimentAnalysis = await fetchSentimentAnalysis(onChainData.tokenSymbol);\n\n    const onChainAnalysis = {\n        mintAuthorityRenounced: onChainData.mintAuthorityRenounced,\n        freezeAuthorityRenounced: onChainData.freezeAuthorityRenounced,\n        top10HolderConcentrationPercent: onChainData.top10HolderConcentrationPercent,\n        deployerLpConcentrationPercent: onChainData.deployerLpConcentrationPercent,\n    };\n    \n    // Step 3: Calculate the Holistic Score\n    let score = 100;\n    if (!onChainAnalysis.mintAuthorityRenounced) score -= 30;\n    if (!onChainAnalysis.freezeAuthorityRenounced) score -= 20;\n    if (onChainAnalysis.top10HolderConcentrationPercent > 40) score -= 25;\n    else if (onChainAnalysis.top10HolderConcentrationPercent > 20) score -= 15;\n    if (onChainAnalysis.deployerLpConcentrationPercent > 20) score -= 20;\n    \n    if(sentimentAnalysis.humanReadableSummary.includes('Negative')) score -= 20;\n    if(sentimentAnalysis.humanReadableSummary.includes('Positive')) score += 5;\n\n    const sentinelScore = Math.max(0, Math.min(100, Math.round(score)));\n\n    // Step 4: Generate the AI Summary\n    const aiInput = {\n      tokenName: onChainData.tokenName,\n      tokenSymbol: onChainData.tokenSymbol,\n      sentinelScore: sentinelScore,\n      onChainMetrics: onChainAnalysis,\n      sentimentAnalysis: sentimentAnalysis,\n    };\n    const aiResult = await summarizeRiskFactors(aiInput);\n    \n    // Step 5: Assemble the final report\n    const report: SentinelReportData = {\n      tokenAddress: validation.data,\n      tokenName: aiInput.tokenName,\n      tokenSymbol: aiInput.tokenSymbol,\n      sentinelScore,\n      aiAnalysis: aiResult,\n      onChainAnalysis,\n      sentimentAnalysis,\n    };\n\n    return { report, error: null };\n  } catch (e: any) {\n    console.error(e);\n    return { report: null, error: e.message || 'An unexpected error occurred during analysis.' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeToken as '6013ecdbfbdac36cd2f76b33e6e289628385837e17'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}